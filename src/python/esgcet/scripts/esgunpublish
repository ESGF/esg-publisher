#!/usr/bin/env python

import sys
import os
import getopt
import logging

from esgcet.model import *
from esgcet.publish import deleteDatasetList, updateThreddsMasterCatalog, reinitializeThredds, DELETE, UNPUBLISH, NO_OPERATION, readDatasetMap
from esgcet.config import loadConfig, initLogging
from esgcet.exceptions import *
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, join
from esgcet.messaging import debug, info, warning, error, critical, exception

usage = """Usage:
    esgunpublish [options] dataset_name [dataset_name ...]

    -or-

    esgunpublish [options] --map dataset_map

    Delete or retract dataset(s) in this order:

      - Remove the dataset from the gateway (see --skip-gateway)
      - Remove the LAS entry (see --las)
      - Remove the THREDDS entry (see --skip-thredds)
      - Remove the local database entry, if --database-delete is set. By default the local database entry is
        kept intact, so that data files do not have to be rescanned.
      
    This script does not remove the data files, but does remove metadata associated
    with the dataset(s). The details of what metadata are removed depends on the options --gateway-retract
    and --database-delete.

Arguments:
    dataset_name: The string name of the dataset(s) to be unpublished.

Options:

    --database-delete: Delete the associated local database entry for this dataset. By default, the
      database information is left intact.

    --echo-sql: Echo SQL commands

    --gateway-retract: Retract gateway metadata about the dataset. The default is to 
      delete the dataset, which removes all metadata. In contrast, retracting makes
      the dataset undiscoverable from the portal, but leaves metrics and versioning information intact.
      Use --skip-gateway to suppress gateway metadata deletion.

    -h, --help: Print a help message.

    -i init_file: Initialization file. If not specified, the default installed init file is read.

    --las: Do not reinitialize the LAS server.

    --map dataset_map: Delete all datasets in dataset_map. 'dataset_map' is a map file
      as generated by esgscan_directory. If this option is used,
      trailing command line arguments (dataset_names) are ignored.

    --skip-gateway: Perform local (node) operations, skip gateway dataset delete. Ignore --gateway-retract option.

    --skip-thredds: Do not remove associated THREDDS catalogs, or reinitialize the TDS server.
      By default, THREDDS catalogs are removed.

    --sync-thredds: Delete all THREDDS catalogs ('orphaned' catalogs) without a corresponding database entry.
      
    --use-list filelist
        Read the list of dataset names from a file, containing one
        dataset name per line. If the filelist is '-', read from
        standard input.

"""

def cleanupCatalogs(arg, dirname, names):
    for name in names:
        base, suffix = os.path.splitext(name)
        if suffix==".xml" and name not in ["catalog.xml"]:
            fullname = os.path.join(dirname, name)
            if not arg.has_key(fullname):
                ans = raw_input("The catalog %s is 'orphaned', delete? [y|n]: "%fullname)
                if ans.lower()=='y':
                    print "Deleting %s"%fullname
                    os.unlink(fullname)

def main(argv):

    try:
        args, lastargs = getopt.getopt(argv, "hi:", ['database-delete', 'echo-sql', 'gateway-retract', 'map=', 'skip-gateway', 'las', 'skip-thredds', 'sync-thredds', 'use-list='])
    except getopt.error:
        print sys.exc_value
        print usage
        sys.exit(0)

    datasetMap = None
    deleteDset = False
    unpublishOnGateway = False
    echoSql = False
    init_file = None
    gatewayOp = DELETE
    las = False
    thredds = True
    syncThredds = False
    useList = False
    for flag, arg in args:
        if flag=='--database-delete':
            deleteDset = True
        elif flag=='--echo-sql':
            echoSql = True
        elif flag=='--gateway-retract':
            unpublishOnGateway = True
        elif flag in ['-h', '--help']:
            print usage
            sys.exit(0)
        elif flag=='-i':
            init_file = arg
        elif flag=='--map':
            datasetMap = readDatasetMap(arg)
        elif flag=='--skip-gateway':
            gatewayOp = NO_OPERATION
        elif flag=='--las':
            las = True
        elif flag=='--skip-thredds':
            thredds = False
        elif flag=='--sync-thredds':
            syncThredds = True
        elif flag=='--use-list':
            useList = True
            useListPath = arg
            
    if gatewayOp!=NO_OPERATION and unpublishOnGateway:
        gatewayOp = UNPUBLISH

    # Load the configuration and set up a database connection
    config = loadConfig(init_file)
    engine = create_engine(config.get('extract', 'dburl'), echo=echoSql, pool_recycle=3600)
    initLogging('extract', override_sa=engine)
    Session = sessionmaker(bind=engine, autoflush=True, autocommit=False)

    if config is None:
        raise ESGPublishError("No configuration file found.")
    threddsRoot = config.get('DEFAULT', 'thredds_root')

    if datasetMap is None:
        if not useList:
            datasetNames = lastargs
        else:
            if useListPath=='-':
                namelist = sys.stdin
            else:
                namelist = open(useListPath)
            datasetNames = []
            for line in namelist.readlines():
                datasetNames.append(line.strip())
    else:
        datasetNames = datasetMap.keys()
        datasetNames.sort()
    result = deleteDatasetList(datasetNames, Session, gatewayOp, thredds, las, deleteDset)
    print `result`

    # Synchronize database and THREDDS catalogs
    if syncThredds:
        threddsRoot = config.get('DEFAULT', 'thredds_root')

        # Make a dictionary of catalogs from the database
        session = Session()
        subcatalogs = session.query(Catalog).select_from(join(Catalog, Dataset, Catalog.dataset_name==Dataset.name)).all()
        catdict = {}
        for catalog in subcatalogs:
            location = os.path.join(threddsRoot, catalog.location)
            catdict[location] = 1
        session.close()

        # Scan all XML files in the threddsroot
        os.path.walk(threddsRoot, cleanupCatalogs, catdict)

if __name__=='__main__':
    main(sys.argv[1:])
